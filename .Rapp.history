d
year(d)
month(d)
day(d)
str(year(d))
toString(year(d)) + toString(month(d)) + toString(day(d))
toString(year(d))
paste(toString(year(d)), toString(month(d)), toString(day(d)))
a <- (year(d), month(d), day(d))
a <- c(year(d), month(d), day(d))
a
?sprintf
year <- sprintf("%04d", year(d))
year
year <- sprintf("%04d", month(d))
year
year <- sprintf("%04d", year(d))
month <- springf("%02d", month(d))
month <- sprintf("%02d", month(d))
day <- sprintf("%02d", day(d))
year
month
day
paste(year, month, day)
?paste
paste(year, month, day, sep = "")
d
d = d -1
d
dateString <- function(d) {#
	year <- sprintf("%04d", year(d))#
	month <- springf("%02d", month(d))#
	day <- sprintf("%02d", day(d))#
	paste(year, month, day, sep = "")#
}
dateString(d)
dateString <- function(d) {#
	year <- sprintf("%04d", year(d))#
	month <- sprintf("%02d", month(d))#
	day <- sprintf("%02d", day(d))#
	paste(year, month, day, sep = "")#
}
dateString(d)
dateString(d-2)
ls
ls()
date = Sys.Date()
date
require(XML)#
require(RCurl)#
require(lubridate)#
require(plyr)#
require(stringr)#
require(jsonlite)
urlBase = 'http://api.wunderground.com/api'#
key = '28ceb0f69590b457'#
innerSunset.ID = 'KCASANFR156'
urlBuilder <- function(pws, type) {#
	paste(urlBase,'/',key,'/',type,'/q/pws:',pws,'.json',sep='')#
}#
#
histDate <- function(date) {#
	paste('history_',date,sep='')#
}#
#
getDateData <- function(history.api) {#
	history.json <- getURL(history.api)#
	history.raw <- fromJSON(history.json)#
	history <- as.data.frame(history.raw$history$observations)#
	history$tempi.num <- as.numeric(history$tempi)#
	history$dewpti.num <- as.numeric(history$dewpti)#
	history <- within(history, #
		tempDiff <- tempi.num - dewpti.num)#
	history$tempDiff <- history$tempi.num - history$dewpti.num#
	history$fog <- as.factor(floor(history$tempDiff))#
	history$time <- as.POSIXct(paste(history$date$hour, history$date$min, sep=":"),#
		format = "%H:%M")#
	history#
}#
#
dateString <- function(d) {#
	year <- sprintf("%04d", year(d))#
	month <- sprintf("%02d", month(d))#
	day <- sprintf("%02d", day(d))#
	paste(year, month, day, sep = "")#
}#
#
ID = innerSunset.ID
history.api <- urlBuilder(ID, histDate(dateString(date)))
dateData <- getDateData (history.api)
historicalData <- dateData
nrow(historicalData)
names(historicalData)
str(historicalData$date)
summary(historicalData$date)
summary(historicalData$utcdate)
date = date - 1
max_calls_per_day = 450#
max_calls_per_minute = 10
Sys.sleep(60/(max_calls_per_minute + 1))
callCount = 1
callCount = callCount + 1
callCount
date
callCount
max_calls_per_day
max_calls_per_day <- 10
while((callCount <= max_calls_per_day)) {#
	history.api <- urlBuilder(ID, histDate(dateString(date)))#
	dateData <- getDateData (history.api)#
	historicalData <- rbind(historicalData, dateData)#
	date = date - 1#
	# wait 7 minutes in between api calls. total 450 api calls#
	Sys.sleep(60/(max_calls_per_minute + 1))#
	print(callCount)#
	callCount = callCount + 1#
}
history.api <- urlBuilder(ID, histDate(dateString(date)))#
	dateData <- getDateData (history.api)#
	historicalData <- rbind(historicalData, dateData)#
	date = date - 1
require(XML)#
require(RCurl)#
require(lubridate)#
require(plyr)#
require(stringr)#
require(jsonlite)#
#
urlBase = 'http://api.wunderground.com/api'#
key = '28ceb0f69590b457'#
max_calls_per_day = 10#
max_calls_per_minute = 10#
#
innerSunset.ID = 'KCASANFR156'#
#
urlBuilder <- function(pws, type) {#
	paste(urlBase,'/',key,'/',type,'/q/pws:',pws,'.json',sep='')#
}#
#
histDate <- function(date) {#
	paste('history_',date,sep='')#
}#
#
getDateData <- function(history.api) {#
	history.json <- getURL(history.api)#
	history.raw <- fromJSON(history.json)#
	history <- as.data.frame(history.raw$history$observations)#
	history$tempi.num <- as.numeric(history$tempi)#
	history$dewpti.num <- as.numeric(history$dewpti)#
	history <- within(history, #
		tempDiff <- tempi.num - dewpti.num)#
	history$tempDiff <- history$tempi.num - history$dewpti.num#
	history$fog <- as.factor(floor(history$tempDiff))#
	history$time <- as.POSIXct(paste(history$date$hour, history$date$min, sep=":"),#
		format = "%H:%M")#
	history#
}#
#
dateString <- function(d) {#
	year <- sprintf("%04d", year(d))#
	month <- sprintf("%02d", month(d))#
	day <- sprintf("%02d", day(d))#
	paste(year, month, day, sep = "")#
}#
#
ID = innerSunset.ID#
callCount = 1
date = Sys.Date()
history.api <- urlBuilder(ID, histDate(dateString(date)))#
	dateData <- getDateData (history.api)
historicalData <- dateData
date = date - 1
Sys.sleep(60/(max_calls_per_minute + 1))#
	print(callCount)#
	callCount = callCount + 1
date
while((callCount <= max_calls_per_day)) {#
	history.api <- urlBuilder(ID, histDate(dateString(date)))#
	dateData <- getDateData (history.api)#
	historicalData <- rbind(historicalData, dateData)#
	date = date - 1#
	# wait 7 minutes in between api calls. total 450 api calls#
	Sys.sleep(60/(max_calls_per_minute + 1))#
	print(callCount)#
	callCount = callCount + 1#
}
str(historicalData)
require(reshape2)
melt(historicalData$date)
?melt
t <- melt(historicalData$date)
str(t)
?flatten
t <- flatten(historicalData)
str(t)
getDateData <- function(history.api) {#
	history.json <- getURL(history.api)#
	history.raw <- fromJSON(history.json)#
	history <- as.data.frame(history.raw$history$observations)#
	history$tempi.num <- as.numeric(history$tempi)#
	history$dewpti.num <- as.numeric(history$dewpti)#
	history <- within(history, #
		tempDiff <- tempi.num - dewpti.num)#
	history$tempDiff <- history$tempi.num - history$dewpti.num#
	history$fog <- as.factor(floor(history$tempDiff))#
	history$time <- as.POSIXct(paste(history$date$hour, history$date$min, sep=":"),#
		format = "%H:%M")#
	flatten(history)#
}
ID = innerSunset.ID#
callCount = 1
date = Sys.Date()
history.api <- urlBuilder(ID, histDate(dateString(date)))#
	dateData <- getDateData (history.api)
historicalData <- dateData
str(historicalData)
date = date - 1
Sys.sleep(60/(max_calls_per_minute + 1))
print(callCount)#
	callCount = callCount + 1
history.api <- urlBuilder(ID, histDate(dateString(date)))#
	dateData <- getDateData (history.api)#
	historicalData <- rbind(historicalData, dateData)
str(historicalData)
date = date - 1#
	# wait 7 minutes in between api calls. total 450 api calls#
	Sys.sleep(60/(max_calls_per_minute + 1))#
	print(callCount)#
	callCount = callCount + 1
callCount
max_calls_per_day
while((callCount <= max_calls_per_day)) {#
	history.api <- urlBuilder(ID, histDate(dateString(date)))#
	dateData <- getDateData (history.api)#
	historicalData <- rbind(historicalData, dateData)#
	date = date - 1#
	# wait 7 minutes in between api calls. total 450 api calls#
	print(callCount)#
	callCount = callCount + 1#
	Sys.sleep(60/(max_calls_per_minute + 1))#
}
str(historicalData)
summary(date.mon)
summary(historicalData$date.mon)
nrow(historicalData[historicalData$fog < 4])
nrow(historicalData[historicalData$tempDiff < 4])
nrow(historicalData[historicalData$tempDiff < 4],)
nrow(historicalData[historicalData$tempDiff < 4,])
nrow(historicalData)
getData <- function() {#
	while((callCount <= max_calls_per_day)) {#
		print(callCount)#
		history.api <- urlBuilder(ID, histDate(dateString(date)))#
		dateData <- getDateData (history.api)#
		historicalData <- rbind(historicalData, dateData)#
		date = date - 1#
		# wait 7 minutes in between api calls. total 450 api calls#
		callCount = callCount + 1#
		Sys.sleep(60/(max_calls_per_minute + 1))#
	}#
}
getData
getData()
max_calls_per_day = 450
getData()
nrow(historicalData)
str(historicalData)
summary(as.numeric(historicalData$date.year))
summary(as.numeric(historicalData$date.month))
summary(as.numeric(historicalData$date.mon))
tail(historicalData$date.mon)
tail(historicalData$date.year)
tail(historicalData$date.mday)
str(dateData)
date
getData
ls()
ls
ls()
names(historicalData)
str(historicalData$UV)
ls
ls()
nrow(historicalData)
date
names(historicalData)
tail(historicalData)
tail(historicalData$date.pretty)
tail(historicalData)
myvars <- c('tempi', 'dewpti', 'tempDiff', 'fog', 'time', 'date.pretty')
data_short <- historicalData[,myvars]
tail(data_short)
tail(data_short, n = 20)
data_short
ls()\
ls()
max_calls_per_day
max_calls_per_day <- 100
date
callCount
ID = innerSunset.ID#
callCount = 1
getData
getData()
require(XML)#
require(RCurl)#
require(lubridate)#
require(plyr)#
require(stringr)#
require(jsonlite)
urlBASE
urlBase
getData()
nrow(historicalData)
getData
getData <- function() {#
	while((callCount < max_calls_per_day)) {#
		print(callCount, date)#
		history.api <- urlBuilder(ID, histDate(dateString(date)))#
		dateData <- getDateData (history.api)#
		historicalData <- rbind(historicalData, dateData)#
		date = date - 1#
		# wait 7 minutes in between api calls. total 450 api calls#
		callCount = callCount + 1#
		Sys.sleep(60/(max_calls_per_minute - 1))#
	}#
}
getData()
print(callCount)#
		print(date)
print c(callCount, date)
?cat
cat(callCount, date)
?sprintf
sprintf(callCount, date)
?as.String
?as.char
sprintf(as.character(callCount), date)
cat(as.character(callCount), date)
as.character(callCount)
callCount
date
print(as.character(callCount), date)
print c(as.character(callCount), date)
c(as.character(callCount), date)
callCount, date
as.data.frame(callCount, date)
print(c(as.character(callCount), date))
date
print(c(as.character(callCount), as.character(date)))
print(c(callCount, as.character(date)))
getData
callCount
getData <- function() {#
	while((callCount < max_calls_per_day)) {#
		print(c(callCount, as.character(date)))#
		history.api <- urlBuilder(ID, histDate(dateString(date)))#
		dateData <- getDateData (history.api)#
		historicalData <- rbind(historicalData, dateData)#
		date = date - 1#
		# wait 7 minutes in between api calls. total 450 api calls#
		callCount = callCount + 1#
		Sys.sleep(60/(max_calls_per_minute - 1))#
	}#
}
pwd()
cd()
getwd()
setwd("~/Documents/FogOrNot/data")
install.packages("ggmap")
library(ggmap)
mapImageData3 <- get_map(location = c(lon = -0.016179, lat = 51.538525),#
    color = "color",#
    source = "google",#
    maptype = "roadmap",#
    zoom = 16)
ggmap(mapImageData3,#
    extent = "device",#
    ylab = "Latitude",#
    xlab = "Longitude")
mapImageData1 <- get_map(location = c(lon = -0.016179, lat = 51.538525),#
    color = "color",#
    source = "google",#
    maptype = "satellite",#
    zoom = 17)#
ggmap(mapImageData1,#
    extent = "device",#
    ylab = "Latitude",#
    xlab = "Longitude")
map <- get_map(location = 'Europe', zoom = 4)
ggmap(map)
map <- get_map(location = 'San Francisco', zoom = 10)
ggmap(map)
map <- get_map(location = 'San Francisco', zoom = 20)
ggmap(map)
map <- get_map(location = 'San Francisco', zoom = 13)
ggmap(map)
map <- get_map(location = 'San Francisco', zoom = 11)
ggmap(map)
map <- get_map(location = 'San Francisco', zoom = 12)
ggmap(map)
map <- get_map(location = 'Twin Peaks, San Francisco', zoom = 12)
ggmap(map)
map <- get_map(location = 'Twin Peaks, San Francisco', zoom = 12.5)
map <- get_map(location = 'Twin Peaks, San Francisco', zoom = 12)
ggmap(map)
map <- get_map(location = 'Twin Peaks, San Francisco', zoom = "auto")
ggmap(map)
map <- get_map(location = 'Twin Peaks, San Francisco', zoom = 12)
ggmap(map)
?get_cloudmade
?get_cloudmademap
?geocode
geocode("inner sunset, san francisco", output = c("latlon"))
map <- get_map(location = 'Twin Peaks, San Francisco', zoom = 13)
ggmap(map)
map <- get_map(location = 'Twin Peaks, San Francisco', zoom = 12)
ggmap(map)
ggmap(map) +
geom_point(color = "blue")
name <- c("inner sunet", "west portal", "twin peaks", "outer richmond")#
ID <- c("KCASANFR320", "KCASANFR306", "KCASANFR34", "KCASANFR107")#
lat <- c(37.756, 37.740, 37.749, 37.772)#
lon <- c(-122.475, -122.471, -122.453, -122.511)]#
#
locations <- data.frame(name, ID, lat, lon)
lon <- c(-122.475, -122.471, -122.453, -122.511)#
#
locations <- data.frame(name, ID, lat, lon)
names(locations)
showMap <- ggmap(map, #
	base_layer = ggplot(locations, aes = (lat, lon))#
	)
showMap <- ggmap(map, base_layer = ggplot(locations, aes = (lat, lon)))
showMap <- ggmap(map, base_layer = ggplot(locations, aes = (x = lat, y = lon)))
?ggmap
showMap <- ggmap(map) +#
	geom_point(aes = (x = lat, y = lon), data = locations, alpha = .5)
showMap <- ggmap(map) +#
	geom_point(aes(x = lat, y = lon), data = locations, alpha = .5)
print(showMap)
locations
showMap <- ggmap(map) +#
	geom_point(aes(x = lat, y = lon), data = locations, colour = "blue")
print(showMap)
showMap <- ggmap(map) +#
	geom_point(aes(x = lat, y = lon), data = locations, colour = "blue", size = 4)
print(showMap)
ggmap(map) +#
	geom_point(aes(x = lat, y = lon), data = locations, colour = "blue", size = 4)
ggmap(map) +#
	geom_point(aes(x = locations$lat, y = locations$lon), data = locations, colour = "blue", size = 4)
?ggmap
showMap <- ggmap(map, base_layer = ggplot(locations, aes(x = lat, y = lon))
)
print(showMap)
map1 <- ggmap(map, base_layer = ggplot(locations, aes(x = lat, y = lon)))
showMap <- ggmap(map) +#
	geom_point(aes(x = lon, y = lat), data = locations, colour = "blue", size = 4)
print(showMap)
?geom_polygon
?heatmap
?geom_density2d
names(mtcar)
setwd("~/Documents/DataSci/FogOrNot/code")
source("main.R")
showMap()
source("main.R")
showMap()
